; Deny any action that is not defined by the policy.
(handleunknown deny)

; Define the set of all subject and object types, to allow certain
; actions to be whitelisted or blacklisted for everything.
(typeattribute global)
(typeattributeset global ((all_s) (all_o)))

; All subjects are allowed to use the label they already have.
(allow all_s self (processes (transform)))

; All subjects are allowed to read and execute all files.
(allow all_s global (files (load)))

; All subjects are allowed to interact with processes in
; most ways without policy restrictions.
(allow all_s global (processes (interact)))

; PID 1 starts as "kernel_t" and becomes "init_t".
(typetransition kernel_t init_exec_t process init_t)
(allow kernel_t init_t (processes (transform)))
(allow init_t init_exec_t (file (entrypoint)))

; PID 1 starts most daemons as "system_t".
(typetransition init_t os_t process system_t)
(allow init_t system_t (processes (transform)))
(allow system_t os_t (file (entrypoint)))

; PID 1 starts API components as "api_t".
(typetransition init_t api_exec_t process api_t)
(allow init_t api_t (processes (transform)))
(allow api_t api_exec_t (file (entrypoint)))

; PID 1 starts container runtimes as "runtime_t".
; The level range is adjusted to span all categories at the same time,
; to support Docker's use of MCS labels.
(typetransition init_t runtime_exec_t process runtime_t)
(allow init_t runtime_t (processes (transform)))
(allow runtime_t runtime_exec_t (file (entrypoint)))

; `runc` starts container processes as "container_t" by default, but
; it can use other "container" subject labels like "super_t".
; Unlike the above transitions, this depends on correct labeling for
; objects on local storage.
(typetransition runtime_t local_t process container_t)
(allow runtime_t container_s (processes (transform)))
(allow container_s local_t (file (entrypoint)))

; Allow containers to communicate with runtimes via pipes.
(allow container_s runtime_t (files (mutate)))

; If a trusted process creates a file or directory when the parent
; directory has no label, it receives the "local_t" label.
(typetransition trusted_s unlabeled_t file local_t)
(typetransition trusted_s unlabeled_t dir local_t)

; If a runtime process creates a directory for cached container layers
; on local storage, it receives the "cache_t" label.
(typetransition runtime_t local_t dir "io.containerd.content.v1.content" cache_t)

; All subjects are allowed to write to objects with their own label.
; This includes files like the ones under /proc/self.
; They can also set watches on those objects.
(allow all_s self (files (mutate watch)))

; All subjects are allowed to write to and set watches for "foreign"
; and "ephemeral" objects, such as files in /mnt and /tmp.
; They can also manage mounts for "foreign" objects.
(allow all_s ephemeral_o (files (mutate watch)))
(allow all_s foreign_o (files (mutate watch mount)))

; All subjects are allowed to write to, set watches for, and manage
; mounts for most files and directories on /local.
(allow all_s local_t (files (mutate watch mount)))

; Trusted components are allowed to manage mounts everywhere.
(allow trusted_s global (files (mount)))

; Trusted components can set watches on immutable files, since we
; expect this behavior from systemd and dbus-broker.
(allow trusted_s immutable_o (files (watch)))

; Only specific components can write to "private_t" or "cache_t", as
; they provide a means to persist changes across container restarts
; and reboots. We also restrict the ability to set watches as this
; can be used to block access for another process.
(allow api_s private_t (files (mutate watch)))
(allow runtime_s cache_t (files (mutate watch)))

; Untrusted processes should not be permitted to modify these files,
; set watches for them, or to manage mounts for these directories.
(neverallow untrusted_s protected_o (files (mutate watch mount)))
(neverallow untrusted_s immutable_o (files (watch)))

; Only trusted components are allowed to relabel files.
(allow trusted_s global (files (relabel)))

; Untrusted processes should not be permitted to relabel files.
(neverallow untrusted_s global (files (relabel)))

; Containers are allowed to relax security constraints, since we
; don't control what code they run or how it's built.
(allow container_s self (processes (relax)))
(allow container_s global (files (relax)))

; Host processes should not need to relax security constraints.
(neverallow host_s global (processes (relax)))
(neverallow host_s global (files (relax)))

; Files and directories that reside on the dm-verity backed root
; filesystem are not mutable, and the policy should not permit it.
(neverallow all_s immutable_o (files (mutate)))

; Files that exist elsewhere should not be an entrypoint.
(neverallow all_s ephemeral_o (files (enter)))
(neverallow all_s foreign_o (files (enter)))

; All subjects are allowed to use most actions related to sockets,
; networks, and IPC mechanisms.
(allow all_s global (sockets (use)))
(allow all_s global (networks (use)))
(allow all_s global (ipcs (use)))

; Only trusted components are allowed to relabel sockets and packets.
(allow trusted_s global (sockets (relabel)))
(allow trusted_s global (networks (relabel)))

; Untrusted processes cannot relabel sockets or packets.
(neverallow untrusted_s global (sockets (relabel)))
(neverallow untrusted_s global (networks (relabel)))

; All subjects are allowed to use most systems-level functionality,
; such as bpf and capabilities.
(allow all_s global (systems (use)))

; Only trusted components can use systems-level management functions.
; This includes interactions with SELinux-aware userspace programs
; such as systemd and dbus-broker.
(allow trusted_s global (systems (manage)))

; Untrusted processes cannot use systems-level management functions.
(neverallow untrusted_s global (systems (manage)))

; TODO: remove once we're confident that we aren't generating AVC
; denials for the majority of workloads.
(typepermissive kernel_t)
(typepermissive init_t)
(typepermissive system_t)
(typepermissive api_t)
(typepermissive runtime_t)
(typepermissive container_t)
(typepermissive super_t)
